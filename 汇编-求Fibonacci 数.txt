datas   segment
result  db        1d,24 dup(0)
        x  db        1d,24 dup(0)
 mess1  db        0dh,0ah,'Please choose a data from 1 to 100:','$'
    mess2  db        0dh,0ah,'The result is:','$'
    mess3  db        0dh,0ah,'Press Q/q to exit.','$'
     flag  dw        ?
messerror  db        0dh,0ah,'Input error,please re-enter.','$'
     quit  db        0dh,0ah,'You have typed Q/q to exit.','$'
    datas  ends
  stacks  segment
           dw        128 dup(?)
   stacks  ends
codes  segment
           assume    cs:codes,ds:datas,ss:stacks,es:datas
start:
           mov       ax,datas    
           mov       ds,ax
           mov       es,ax
           mov       ax,stacks   
           mov       ss,ax
    
 reinput:
           push      ax         
           push      bx
           push      cx
           push      dx
           push      si
           push      di
           mov       ah,09      
           lea       dx,mess3
           int       21h
           lea       dx,mess1
           int       21h

           mov       bx,0
   input:
           mov       ah,01
           int       21h
           cmp       al,'q'      
           jz        end_        
           cmp       al,'Q'
           jz        end_
           cmp       al,0dh
           jz        cont
           cmp       al,'0'    
           jb        error     
           cmp       al,':'
           jnb       error 
           
           sub       al,30h
           cbw
           xchg      ax,bx
           mov       cx,10d
           mul       cx
           xchg      ax,bx
           add       bx,ax
           jmp       input
   error:                        
           mov       ah,09
           lea       dx,messerror
           int       21h
           jmp       reinput     
    end_:                        
           mov       ah,09
           lea       dx,quit
           int       21h
           mov       ah,4ch
           int       21h
           ret
    cont:  mov       cx,bx      
           cmp       cx,2
           jle       print      
           sub       cx,2        
    next:  mov       di,cx
           mov       cx,25
           mov       si,0
    adde:  mov       dl,x[si]
           mov       dh,result[si]
           add       dl,dh       
           mov       result[si],dl
           mov       x[si],dh   
           cmp       dl,10d
           jae       great       
           inc       si
           jmp       goon
   great:  sub       result[si],10d          
           inc       si
           add       x[si],1  
    goon:  loop      adde
           mov       cx,di
           loop      next
   print:  lea       dx,mess2   
           mov       ah,09
           int       21h
           mov       cx,25
           mov       si,24
display1:  cmp       flag,0      
           jnz       n2
           cmp       result[si],0
           jz        n3
           add       flag,1
      n2:  mov       dl,result[si]          
           add       dl,30h
           mov       ah,02h
           int       21h
      n3:  dec       si
           loop      display1
           mov       flag,0
           mov       result[0],1d
           mov       x[0],1d
           mov       si,1
           mov       cx,24
 initial:  mov       result[si],0
           mov       x[si],0
           add       si,1
           loop      initial
           mov       si,0
           pop       di          
           pop       si
           pop       dx
           pop       cx
           pop       bx
           pop       ax
           jmp       reinput      
      
           mov       ah,4ch
           int       21h
    codes  ends
           end       start   

